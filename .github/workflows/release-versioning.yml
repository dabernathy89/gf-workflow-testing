# This workflow runs on pushes to release/hotfix branches for CI validation and semantic-release
name: Release Versioning

on:
  push:
    branches:
      - 'release/v**'
      - 'hotfix/v**'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Dummy lint step 1
        run: echo "Running lint check - all files pass linting!"
      - name: Dummy lint step 2
        run: echo "TypeScript compilation successful - no errors found!"
      - name: Dummy lint step 3
        run: echo "Code style validation complete - formatting looks good!"

  unit-test:
    name: Unit Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Dummy unit test step 1
        run: echo "Running unit tests - 25 tests passed!"
      - name: Dummy unit test step 2
        run: echo "Code coverage 95% - exceeds minimum threshold!"
      - name: Dummy unit test step 3
        run: echo "All test suites completed successfully!"

  ui-test:
    name: UI Test
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Dummy UI test step 1
        run: echo "Starting browser automation tests..."
      - name: Dummy UI test step 2
        run: echo "Running Playwright tests - 15 scenarios passed!"
      - name: Dummy UI test step 3
        run: echo "UI test suite completed - all user flows working!"
      - name: Dummy UI test step 4
        run: echo "Generated test report and screenshots"

  version-and-tag:
    name: Version and Tag
    runs-on: ubuntu-latest
    needs:
      - lint
      - unit-test
      - ui-test
    outputs:
      version: ${{ steps.semrel.outputs.version }}
      tag_name: ${{ steps.create_tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Run semantic-release
        id: semrel
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_PAT }}
        run: |
          echo "üè∑Ô∏è Running semantic-release (version, changelog, and tagging)"
          npx semantic-release --debug

      - name: Create tag output
        id: create_tag
        if: steps.semrel.outputs.version
        run: |
          TAG_NAME="v${{ steps.semrel.outputs.version }}"
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "‚úÖ Version: ${{ steps.semrel.outputs.version }}"
          echo "üè∑Ô∏è Tag created: $TAG_NAME"

  create-pull-request:
    name: Create Pull Request
    runs-on: ubuntu-latest
    needs: version-and-tag
    if: needs.version-and-tag.outputs.version
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.REPO_PAT }}

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.REPO_PAT }}
        run: |
          CURRENT_BRANCH="${{ github.ref_name }}"
          VERSION="${{ needs.version-and-tag.outputs.version }}"
          TAG_NAME="${{ needs.version-and-tag.outputs.tag_name }}"

          # Determine if this is a release or hotfix
          if [[ "$CURRENT_BRANCH" == release/* ]]; then
            PR_TITLE="Release $TAG_NAME"
            PR_BODY=$(cat << EOF
          üöÄ Release $TAG_NAME

          This PR contains the release branch for version $VERSION.

          ## Changes
          - Version bumped to $VERSION
          - Changelog updated
          - Tag $TAG_NAME created

          ## Semantic Release Output
          - Version: $VERSION
          - Tag: $TAG_NAME
          - Changelog generated

          Ready for review and merge to main.
          EOF
          )
          else
            PR_TITLE="Hotfix $TAG_NAME"
            PR_BODY=$(cat << EOF
          üî• Hotfix $TAG_NAME

          This PR contains the hotfix branch for version $VERSION.

          ## Changes
          - Version bumped to $VERSION
          - Changelog updated
          - Tag $TAG_NAME created

          ## Semantic Release Output
          - Version: $VERSION
          - Tag: $TAG_NAME
          - Changelog generated

          Urgent hotfix - ready for review and merge to main.
          EOF
          )
          fi

          # Check if PR already exists
          if gh pr view "$CURRENT_BRANCH" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è PR for branch $CURRENT_BRANCH already exists"
            gh pr view "$CURRENT_BRANCH"
          else
            # Create the PR
            gh pr create \
              --title "$PR_TITLE" \
              --body "$PR_BODY" \
              --base main \
              --head "$CURRENT_BRANCH"

            echo "‚úÖ Pull request created: $PR_TITLE"
          fi

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [version-and-tag, create-pull-request]
    if: needs.version-and-tag.outputs.version
    environment: Release  # üîë Manual approval required here!
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.REPO_PAT }}
        run: |
          TAG_NAME="${{ needs.version-and-tag.outputs.tag_name }}"

          # Check if release already exists
          if gh release view "$TAG_NAME" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Release $TAG_NAME already exists, skipping release creation"
            exit 0
          fi

          # Try to get changelog content for this version
          CHANGELOG_CONTENT=""
          if [ -f CHANGELOG.md ]; then
            # Extract the section for this version from changelog
            VERSION=${TAG_NAME#v}  # Remove 'v' prefix
            CHANGELOG_CONTENT=$(awk "/^## \[?${VERSION}\]?|^## ${VERSION}[^0-9]/{flag=1; next} /^## \[?[0-9]/{flag=0} flag" CHANGELOG.md | sed '/^$/d' || echo "")
          fi

          if [ -z "$CHANGELOG_CONTENT" ]; then
            # Fallback to auto-generated notes
            gh release create "$TAG_NAME" \
              --title "Release $TAG_NAME" \
              --generate-notes
          else
            # Use changelog content
            gh release create "$TAG_NAME" \
              --title "Release $TAG_NAME" \
              --notes "$CHANGELOG_CONTENT"
          fi

          echo "‚úÖ GitHub release $TAG_NAME created successfully"