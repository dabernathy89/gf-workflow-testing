# This workflow runs on pushes to release/hotfix branches for CI validation and semantic-release
name: Release Versioning

on:
  push:
    branches:
      - 'release/v**'
      - 'hotfix/v**'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Dummy lint step 1
        run: echo "Running lint check - all files pass linting!"
      - name: Dummy lint step 2
        run: echo "TypeScript compilation successful - no errors found!"
      - name: Dummy lint step 3
        run: echo "Code style validation complete - formatting looks good!"

  unit-test:
    name: Unit Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Dummy unit test step 1
        run: echo "Running unit tests - 25 tests passed!"
      - name: Dummy unit test step 2
        run: echo "Code coverage 95% - exceeds minimum threshold!"
      - name: Dummy unit test step 3
        run: echo "All test suites completed successfully!"

  ui-test:
    name: UI Test
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Dummy UI test step 1
        run: echo "Starting browser automation tests..."
      - name: Dummy UI test step 2
        run: echo "Running Playwright tests - 15 scenarios passed!"
      - name: Dummy UI test step 3
        run: echo "UI test suite completed - all user flows working!"
      - name: Dummy UI test step 4
        run: echo "Generated test report and screenshots"

  version-and-tag:
    name: Version and Tag
    runs-on: ubuntu-latest
    needs:
      - lint
      - unit-test
      - ui-test
    outputs:
      version: ${{ steps.semrel.outputs.version || steps.hotfix_version.outputs.version }}
      tag_name: ${{ steps.create_tag.outputs.tag || steps.hotfix_tag.outputs.tag }}
      is_hotfix: ${{ steps.check_branch.outputs.is_hotfix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false

      - name: Check branch type
        id: check_branch
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          if [[ "$BRANCH_NAME" == hotfix/* ]]; then
            echo "is_hotfix=true" >> $GITHUB_OUTPUT
            echo "üî• Detected hotfix branch: $BRANCH_NAME"
          else
            echo "is_hotfix=false" >> $GITHUB_OUTPUT
            echo "üöÄ Detected release branch: $BRANCH_NAME"
          fi

      - name: Setup Node.js
        if: steps.check_branch.outputs.is_hotfix == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install dependencies
        if: steps.check_branch.outputs.is_hotfix == 'false'
        run: npm ci

      - name: Configure Git
        if: steps.check_branch.outputs.is_hotfix == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Run semantic-release
        id: semrel
        if: steps.check_branch.outputs.is_hotfix == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_PAT }}
        run: |
          echo "üè∑Ô∏è Running semantic-release (version, changelog, and tagging)"
          npx semantic-release --debug

      - name: Create tag output for release
        id: create_tag
        if: steps.check_branch.outputs.is_hotfix == 'false' && steps.semrel.outputs.version
        run: |
          TAG_NAME="v${{ steps.semrel.outputs.version }}"
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "‚úÖ Version: ${{ steps.semrel.outputs.version }}"
          echo "üè∑Ô∏è Tag created: $TAG_NAME"

      - name: Determine hotfix version with git-cliff
        id: hotfix_version
        if: steps.check_branch.outputs.is_hotfix == 'true'
        uses: orhun/git-cliff-action@v4
        with:
          args: --bumped-version --tag-pattern "v[0-9]*"
        env:
          OUTPUT: GITHUB_OUTPUT

      - name: Create hotfix tag output
        id: hotfix_tag
        if: steps.check_branch.outputs.is_hotfix == 'true'
        run: |
          VERSION="${{ steps.hotfix_version.outputs.version }}"
          if [ -n "$VERSION" ]; then
            TAG_NAME="v${VERSION}"
            echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "üî• Hotfix version determined: $VERSION"
            echo "üè∑Ô∏è Hotfix tag to be created: $TAG_NAME"
          else
            echo "‚ùå Failed to determine hotfix version"
            exit 1
          fi

  create-pull-request:
    name: Create Pull Request
    runs-on: ubuntu-latest
    needs: version-and-tag
    if: needs.version-and-tag.outputs.version
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.REPO_PAT }}

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.REPO_PAT }}
        run: |
          CURRENT_BRANCH="${{ github.ref_name }}"
          VERSION="${{ needs.version-and-tag.outputs.version }}"
          TAG_NAME="${{ needs.version-and-tag.outputs.tag_name }}"
          IS_HOTFIX="${{ needs.version-and-tag.outputs.is_hotfix }}"

          # Determine if this is a release or hotfix
          if [[ "$IS_HOTFIX" == "true" ]]; then
            PR_TITLE="Hotfix $TAG_NAME"
            PR_BODY=$(cat << EOF
          ÔøΩ Hotfix $TAG_NAME

          This PR contains the hotfix branch for version $VERSION.

          ## Changes
          - Hotfix for critical issue
          - Version will be $VERSION once released

          ## üåê GitHub Release Creation Required
          **IMPORTANT:** Before merging this PR, create a GitHub release:

          1. **Go to**: [Create New Release](https://github.com/${{ github.repository }}/releases/new)
          2. **Tag**: \`$TAG_NAME\` (create new tag)
          3. **Target**: \`$CURRENT_BRANCH\` (select this branch)
          4. **Title**: \`Hotfix $TAG_NAME\`
          5. **Description**: Use auto-generated release notes
          6. **Click**: "Publish release"

          ## ‚ö†Ô∏è Important Merge Instructions
          1. **First**: Create the GitHub release as described above
          2. **Then**: Use either "Create a merge commit" or "Rebase and merge" (DO NOT use "Squash and merge")
          3. This preserves the git tag on the correct commit for production deployment

          ## Post-Merge Actions
          The release will already be created from step 1 above.

          Urgent hotfix - ready for review and merge to main.
          EOF
          )
          else
            PR_TITLE="Release $TAG_NAME"
            PR_BODY=$(cat << EOF
          ÔøΩ Release $TAG_NAME

          This PR contains the release branch for version $VERSION.

          ## Changes
          - Version bumped to $VERSION
          - Changelog updated
          - Tag $TAG_NAME created

          ## Semantic Release Output
          - Version: $VERSION
          - Tag: $TAG_NAME
          - Changelog generated

          ## ‚ö†Ô∏è Important Merge Instructions
          **DO NOT use "Squash and merge"** - Use either "Create a merge commit" or "Rebase and merge" to preserve the git tag on the correct commit for production deployment.

          Ready for review and merge to main.
          EOF
          )
          fi

          # Check if PR already exists
          if gh pr view "$CURRENT_BRANCH" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è PR for branch $CURRENT_BRANCH already exists"
            gh pr view "$CURRENT_BRANCH"
          else
            # Create the PR
            gh pr create \
              --title "$PR_TITLE" \
              --body "$PR_BODY" \
              --base main \
              --head "$CURRENT_BRANCH"

            echo "‚úÖ Pull request created: $PR_TITLE"
          fi

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [version-and-tag, create-pull-request]
    if: needs.version-and-tag.outputs.version && needs.version-and-tag.outputs.is_hotfix == 'false'
    environment: Release  # üîë Manual approval required here!
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.REPO_PAT }}
        run: |
          TAG_NAME="${{ needs.version-and-tag.outputs.tag_name }}"

          echo "üöÄ Regular release process"

          # Check if release already exists
          if gh release view "$TAG_NAME" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Release $TAG_NAME already exists, skipping release creation"
            exit 0
          fi

          # Create release with auto-generated notes
          gh release create "$TAG_NAME" \
            --title "Release $TAG_NAME" \
            --generate-notes \
            --latest
          echo "‚úÖ GitHub release $TAG_NAME created successfully"
