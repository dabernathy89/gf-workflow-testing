name: Create Release Branch

on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: 'Commit SHA to create branch from (optional, defaults to main)'
        required: false
        type: string

jobs:
  create-branch:
    permissions:
      contents: write
      actions: write
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semrel.outputs.version }}
      tag_name: ${{ steps.create_tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.REPO_PAT }}

      - name: Generate release branch name
        id: release_branch
        run: |
          # For releases, use date-based naming
          CURRENT_DATE=$(date +%Y-%m-%d)
          SHORT_SHA=$(git rev-parse --short HEAD)
          BRANCH_NAME="release/v${CURRENT_DATE}-${SHORT_SHA}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "📝 Generated release branch name: $BRANCH_NAME"

      - name: Check if branch already exists
        run: |
          BRANCH_NAME="${{ steps.release_branch.outputs.branch_name }}"
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q refs; then
            echo "❌ Branch $BRANCH_NAME already exists"
            exit 1
          fi
          echo "✅ Branch $BRANCH_NAME is available"

      - name: Create branch
        run: |
          BRANCH_NAME="${{ steps.release_branch.outputs.branch_name }}"
          COMMIT_SHA="${{ inputs.commit_sha }}"

          git checkout main

          if [ -n "$COMMIT_SHA" ]; then
            echo "📍 Creating release branch from commit: $COMMIT_SHA"
            git checkout -b "$BRANCH_NAME" "$COMMIT_SHA"
          else
            echo "📍 Creating release branch from main"
            git checkout -b "$BRANCH_NAME"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run semantic-release
        id: semrel
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_PAT }}
        run: |
          echo "🏷️ Running semantic-release (version, changelog, and tagging)"
          npx semantic-release --debug

      - name: Create tag output for release
        id: create_tag
        if: steps.semrel.outputs.version
        run: |
          TAG_NAME="v${{ steps.semrel.outputs.version }}"
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "✅ Version: ${{ steps.semrel.outputs.version }}"
          echo "🏷️ Tag created: $TAG_NAME"

      - name: Output success message
        run: |
          BRANCH_NAME="${{ steps.release_branch.outputs.branch_name }}"
          COMMIT_SHA="${{ inputs.commit_sha }}"

          echo "✅ Release branch created: $BRANCH_NAME"

          if [ -n "$COMMIT_SHA" ]; then
            echo "📍 Created from commit: $COMMIT_SHA"
          else
            echo "📍 Created from main branch"
          fi

  create-pull-request:
    name: Create Pull Request
    runs-on: ubuntu-latest
    needs: create-branch
    if: needs.create-branch.outputs.version
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.REPO_PAT }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.REPO_PAT }}
          branch: ${{ github.ref_name }}
          title: "Release ${{ needs.create-branch.outputs.tag_name }}"
          body: |
            🚀 Release ${{ needs.create-branch.outputs.tag_name }}

            This PR contains the release branch for version ${{ needs.create-branch.outputs.version }}.

            ## Changes
            - Version bumped to ${{ needs.create-branch.outputs.version }}
            - Changelog updated
            - Tag ${{ needs.create-branch.outputs.tag_name }} created

            ## ⚠️ Important Merge Instructions
            **DO NOT use "Squash and merge"** - Use only "Create a merge commit" (DO NOT use "Squash and merge" or "Rebase and merge") to preserve the git tag on the correct commit for production deployment.

            Ready for review and merge to main.
          base: main
          draft: true