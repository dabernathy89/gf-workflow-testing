name: Create Release or Hotfix

on:
  workflow_dispatch:
    inputs:
      type:
        description: 'Type of branch to create'
        required: true
        type: choice
        options:
          - release
          - hotfix

jobs:
  create-branch:
    permissions:
      contents: write
      actions: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.REPO_PAT }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate release branch name
        id: release_branch
        if: inputs.type == 'release'
        run: |
          # For releases, use date-based naming
          CURRENT_DATE=$(date +%Y-%m-%d)
          SHORT_SHA=$(git rev-parse --short HEAD)
          BRANCH_NAME="release/v${CURRENT_DATE}-${SHORT_SHA}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "üìù Generated release branch name: $BRANCH_NAME"

      - name: Check for existing release tags (hotfix only)
        if: inputs.type == 'hotfix'
        run: |
          # For hotfixes, check that we have existing tags
          LATEST_TAG=$(git tag -l "v*.*.*" | sort -V | tail -1)
          if [ -z "$LATEST_TAG" ]; then
            echo "‚ùå No previous release tags found. Cannot determine hotfix version."
            echo "Please create a release first, or manually specify a hotfix version."
            exit 1
          fi
          echo "üìç Latest release tag: $LATEST_TAG"
          echo "üîç Will use git-cliff action to determine next version..."

      - name: Determine hotfix version
        id: git_cliff
        if: inputs.type == 'hotfix'
        uses: orhun/git-cliff-action@v4
        with:
          args: --bumped-version --tag-pattern "v[0-9]*"

      - name: Generate hotfix branch name
        id: hotfix_branch
        if: inputs.type == 'hotfix'
        run: |
          NEXT_VERSION="${{ steps.git_cliff.outputs.version }}"

          BRANCH_NAME="hotfix/v${NEXT_VERSION}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "üî• Generated hotfix branch name: $BRANCH_NAME"
          echo "üè∑Ô∏è Target hotfix version: v$NEXT_VERSION"

      - name: Set final branch variables
        id: final_vars
        run: |
          if [ "${{ inputs.type }}" = "release" ]; then
            echo "branch_name=${{ steps.release_branch.outputs.branch_name }}" >> $GITHUB_OUTPUT
            echo "next_version=" >> $GITHUB_OUTPUT
          else
            echo "branch_name=${{ steps.hotfix_branch.outputs.branch_name }}" >> $GITHUB_OUTPUT
            echo "next_version=${{ steps.hotfix_branch.outputs.next_version }}" >> $GITHUB_OUTPUT
          fi

      - name: Check if branch already exists
        run: |
          BRANCH_NAME="${{ steps.final_vars.outputs.branch_name }}"
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q refs; then
            echo "‚ùå Branch $BRANCH_NAME already exists"
            exit 1
          fi
          echo "‚úÖ Branch $BRANCH_NAME is available"

      - name: Create branch
        run: |
          BRANCH_NAME="${{ steps.final_vars.outputs.branch_name }}"
          git checkout main
          git checkout -b "$BRANCH_NAME"
          git push origin "$BRANCH_NAME"

      - name: Output success message
        run: |
          BRANCH_NAME="${{ steps.final_vars.outputs.branch_name }}"
          BRANCH_TYPE="${{ inputs.type }}"

          echo "‚úÖ $BRANCH_TYPE branch created: $BRANCH_NAME"
          echo "üìù Created from current main branch"
          echo ""

          if [ "$BRANCH_TYPE" = "release" ]; then
            echo "üöÄ Release Branch Instructions:"
            echo "1. Push commits to this branch to trigger release-versioning.yml"
            echo "2. Semantic-release will run and create version/tag automatically"
            echo "3. A PR will be created automatically when workflow completes"
            echo "4. Review and merge the PR to complete the release"
          else
            NEXT_VERSION="${{ steps.final_vars.outputs.next_version }}"
            echo "üî• Hotfix Branch Instructions:"
            echo "1. Push your hotfix commits to this branch"
            echo "2. The release-versioning.yml workflow will run and create a PR automatically"
            echo "3. Create a GitHub release using the web UI:"
            echo "   - Go to: https://github.com/${{ github.repository }}/releases/new"
            echo "   - Tag: v$NEXT_VERSION"
            echo "   - Target: $BRANCH_NAME (select this branch)"
            echo "   - Title: Hotfix v$NEXT_VERSION"
            echo "   - Description: Auto-generated release notes"
            echo "4. After creating the release, merge the PR using 'Create merge commit' or 'Rebase and merge'"
            echo ""
            echo "üè∑Ô∏è Expected hotfix version: v$NEXT_VERSION"
            echo "üåê Release creation URL: https://github.com/${{ github.repository }}/releases/new"
          fi
